
@{
    ViewBag.Title = "Index";
}

<style>
    th, td {
        white-space: nowrap; /* Asegura que el texto no se desborde y mantenga el alineamiento */
        text-align: left; /* Asegura un alineamiento consistente */
        padding: 10px; /* Ajusta el espacio interno para uniformidad */
    }

    .text-overflow {
        white-space: nowrap; /* Trunca el texto en las celdas de contenido */
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .text-overflow:hover {
            white-space: normal;
            overflow: visible;
            background-color: #f0f0f0;
            z-index: 1;
            position:  relative;
        }

    .dropdown-menu {
        position: absolute !important;
        will-change: transform;
        transform: translate3d(0, 0, 0); /* Asegura que se muestre dentro del viewport */
    }

    #TablaPrincipalTicket_wrapper {
        min-height: 300px; /* Ajusta el tamaño según tus necesidades */
    }


</style>

<div class="panel">
    <div class="panel-hdr">
        <h2 class="panel-title"> <i class="fal fa-map fa-fw"></i>Incidentes Pendientes</h2>
        @if (User.IsInRole("SARIS_CREARTICKET"))
        {
            <div class="panel-toolbar " role="menu">
                <button onclick="CrearTicket()" class="btn btn-success"><i class="fal fa-plus fa-fw"></i> Crear Incidente</button>
            </div>
        }

    </div>
    <div class="panel-container" style="padding-top:12px; padding-bottom:15px;">
        <div class="col-lg-12">
            <table class="table table-bordered table-hover table-striped w-100 dataTable dtr-inline" style="width:100%;" id="TablaPrincipalTicket">
                <thead>
                    <tr>
                        <th></th>
                        <th >
                            <select id="ddlEstados" class="form-control form-control-sm">
                                <option value="">Seleccionar</option>

                            </select>
                        </th>
                        <th><input type="text" class="form-control"  placeholder=""></th>
                        <th><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>

                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>

                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>

                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                        <th ><input type="text" class="form-control"  placeholder=""></th>
                    </tr>
                    <tr>
                        <th>Acciones</th>
                        <th >Estado</th>
                        <th>Titulo</th>
                        <th>Descripcion</th>
                        <th >Solicitante</th>
                        <th >Area Solicitante</th>
                        <th >Usuario Asignado</th>
                        <th >Area Asignada</th>

                        <th >Categoría apertura</th>
                        <th >Subcategoria apertura</th>
                        <th >Urgencia</th>
                        <th >Impacto</th>
                        <th >Prioridad</th>
                        <th >SLA</th>
                        <th >Usuarios afectados</th>

                        <th >Clasificacion CI</th>
                        <th >CI</th>
                        <th >Servicios</th>
                        <th >Pais</th>
                        <th >Region</th>
                        <th >Ciudad</th>
                        <th >Longitud y Latitud</th>
                        <th >SLA Cumplido</th>

                        <th >Fecha alarma/detección</th>
                        <th >Fecha Creacion Solicitud</th>
                        <th>Fecha última actualización</th>
                        <th >Usuario última actualización</th>
                        <th >Tiempo Transcurrido</th>
                        <th >Motivo de Pausa</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>



@section Scripts{

    <script>


        var idusuariologueado = @ViewBag.idUsuario;
        var idmasalto = 0; //--ViewBag.IdMasReciente;

        $("#TablaPrincipalTicket thead th input[type=text]").on('keyup change', function () {
            debugger;
            var tabla = new $.fn.dataTable.Api("#TablaPrincipalTicket");
            tabla.column($(this).parent().index() + ':visible').search(this.value).draw();

        });

        var tablaPrincipalticket = $('#TablaPrincipalTicket').DataTable({

            autoWidth: false,
            //responsive: true,
            language: {
                "emptyTable": "No se encontraron resultados.",
                //"search": '<div class="icon-addon addon-md"><label for="search" class="ion-search"></label>',
                "paginate": {
                    first: "Primero",
                    previous: "Anterior",
                    next: "Siguiente",
                    last: "Ultimo"
                },
                "lengthMenu": " _MENU_ ",
                "info": "Mostrando registros del _START_ al _END_ de _TOTAL_ registros totales.",
                "infoEmpty": "No hay registros para mostrar.",
            },
            dom: 'Bfrtip',
            order: [[2, "desc"]],
              ajax: {
                url: '@Url.Action("ListarTicket", "Ticket")',
                  method: "Get",
                  dataSrc: function (data) {

                      var opt = ''
                      var unico = new Set();
                      for (const item of data) {
                          unico.add(item.fcDescripcionEstado);
                      }
                      for (const item of unico) {
                          if (item == null) {

                          } else {
                              opt += `<option value="${item}">${item}</option>`
                          }
                      }
                      $(`#ddlEstados`).append(opt);
                      $("#ddlEstados").select2();

                      const ids = data.map(item => item.fiIDRequerimiento);

                      // Encontrar el Id más grande usando Math.max
                      const maxId = Math.max(...ids);
                      idmasalto = maxId;

                      

                      return data;
                    //console.log(data);
                  }
            },
            scrollX: true,
            scrollY: '60vh',
            rowCallback: function (row, data, index) {
                if (data.fiSLA == "SLA No Cumplido") { // aqui es donde se pinta las solicitudes si tienen articulos
                    $(row).css('background-color', "#ff6262");
                }
            },
            columns: [
                
                {//0
                    data: null,
                    className: "text-center",
                    render: function (data) {
                        //console.log(data);
                        var opt = ``;
                        //console.log(data)

                        if (idusuariologueado == data.fiIDUsuarioSolicitante && data.fiIDEstadoRequerimiento == 1) {
                            //opt += `<a href='javascript:void(0);' onclick="EliminarTicket(${data.fiIDRequerimiento})" class='btn btn-sm btn-icon btn-outline-danger rounded-circle mr-1' title='Eliminar Incidente'><i class=\"fal fa-times\"></i></a>`; // se puede usar en otra ocacion asi que no borrar
                        }
                        opt += `
                                    <div class='dropdown d-inline-block dropleft'>
                                        <a href='#'' class='btn btn-sm btn-icon btn-outline-primary rounded-circle shadow-0' data-toggle='dropdown' aria-expanded='true' title='Mas Opciones'><i class=\"fal fa-ellipsis-v\"></i></a>
                                        <div class='dropdown-menu'>
                                            
                                    `;
                        if (@Json.Encode(User.IsInRole("Incidente_Actualizar"))) {
                            opt += `<a class='dropdown-item' href='javascript:void(0);' onclick="ActualizarTicket(${data.fiIDRequerimiento})">Actualizar Incidente</a>`
                        }

                        if (@Json.Encode(User.IsInRole("SARIS_VERDETALLES"))) {

                            opt += `  <a class='dropdown-item' href='javascript:void(0);' onclick="VerDetalleTicket(${data.fiIDRequerimiento})">Ver Detalle Incidente</a>`;
                        }

                        //if (data.fiAreaAsignada == 6)//es 6 por que es pendiente, se deberia de cambiar a un viewbac para traerlo directamente desde al base de datos
                        //{
                        //    opt += `  <a class='dropdown-item' href='javascript:void(0);' onclick="AsignarArea(${data.fiIDRequerimiento},${data.fiIDEstadoRequerimiento})">Asignar Area</a>`;
                        //} else {
                        if (@Json.Encode(User.IsInRole("Incidente_AsignarArea"))) {
                            opt += `  <a class='dropdown-item' href='javascript:void(0);' onclick="AsignarArea(${data.fiIDRequerimiento},${data.fiIDEstadoRequerimiento})">Reasignar Area</a>`;
                        }
                        //}

                        if (@Json.Encode(User.IsInRole("SARIS_AsignarTicket_Usuarios"))) {
                            //if ((data.fiAreaAsignada != 6) & 1 == 1 )//es 0 por que es pendiente de asignar, se deberia de hacer mejor desde la base de datos
                            //{
                                opt += `  <a class='dropdown-item' href='javascript:void(0);' onclick="AsignarUsuario(${data.fiIDRequerimiento},${data.fiIDEstadoRequerimiento},${data.fiAreaAsignada})">Asignar Usuario</a>`;
                            //}
                        }

                        //`"<a href='javascript:void(0);' class='btn btn-sm btn-icon btn-outline-danger rounded-circle mr-1' title='Delete Record'><i class=\"fal fa-times\"></i></a><div class='dropdown d-inline-block dropleft'><a href='#'' class='btn btn-sm btn-icon btn-outline-primary rounded-circle shadow-0' data-toggle='dropdown' aria-expanded='true' title='More options'><i class=\"fal fa-ellipsis-v\"></i></a><div class='dropdown-menu'><a class='dropdown-item' href='javascript:void(0);'>Change Status</a><a class='dropdown-item' href='javascript:void(0);'>Generate Report</a></div></div>"`

                        opt += `</div>
                                </div>`;
                        return opt;
                    }
                },
                {
                    data: null,
                    className: "text-center",
                    render: function (data, type, row) {
                        return `<a href="javascript:void(0)" onclick="ProcesosEstados(${data.fiIDRequerimiento})"> <span class="btn-sm btn-block btn-${data.fcClaseColor} text-center" > ${data.fcDescripcionEstado}</span> </a>`;

                    }
                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data) {
                        
                        const maxLength = idmasalto.toString().length;
                        const paddedIds = padWithZeros(data.fiIDRequerimiento, maxLength)
                        return `${paddedIds} <spam > | <b href="javascript:void(0)" onclick="abrirModalDetalle(${data.fiIDRequerimiento})"> ${data.fcTituloRequerimiento}</b></spam>`

                    }
                },
                {
                    data: "fcDescripcionRequerimiento",
                    className: "td-responsive",

                },
                {
                    data: "fcNombreSolicitante",
                    className: "td-responsive",

                },
                {
                    data: "fcNombreAreaSolicitante",
                    className: "td-responsive",

                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data) {
                        //if (data.fiIDUsuarioAsignado == 3013 || data.fiIDUsuarioAsignado == 4075) { pruebas
                        if (data.fiIDUsuarioAsignado == 3013 || data.fiIDUsuarioAsignado == 3185) { //Produccion
                            return `<span class="btn-sm btn-block badge badge-secondary">Pendiente</span> `;
                        } else {
                            return data.fcNombreAsignado;
                        }
                    }
                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data) {
                        //if (data.fiAreaAsignada == 6) {
                        //    return `<span class="btn-sm btn-block badge badge-secondary">Pendiente</span> `;
                        //} else {
                            return data.fcNombreAreaAsignada;
                        //}
                    }
                },
                {
                    data: "fcDescripcionCategoria",
                    className: "td-responsive",
                },
                {
                    data: "fcTipoRequerimiento",
                    className: "td-responsive",
                },
                {
                    data: "fcDescripcionUrgencia",
                    className: "td-responsive",
                },
                {
                    data: "fcDescripcionImpacto",
                    className: "td-responsive",
                },
                {
                    data: "fcDescripcionPrioridad",
                    className: "td-responsive",
                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data, type, row) {
                        //var segundos = Math.floor(data.fiTiempo / 1000);
                        var minutos = data.fiTiempo//Math.floor(data.fiTiempo / 60);
                        var horas = Math.floor(minutos / 60);
                        var dias = Math.floor(horas / 24);
                        var tiempototal = '';
                        if (dias > 0) {
                            tiempototal += `${dias} <b>Dias.</b>, `;
                        }
                        //console.log((horas % 24))
                        if ((horas % 24) > 0) {
                            tiempototal += `${horas % 24} <b>Horas.</b>, `;
                        }
                        if ((minutos % 60) > 0) {
                            tiempototal += `${minutos % 60} <b>Minutos.</b>, `;
                        }
                        var nuevoValor = `${tiempototal}`; // Por ejemplo, aumentar el valor actual en 1

                        return nuevoValor;
                    }
                },
                {
                    data: "fiAfectacion",
                    className: "td-responsive",
                },
                {
                    data: "fcClacificacionCI",
                    className: "td-responsive",
                },
                {
                    data: "fcConfiguracion",
                    className: "td-responsive",
                },
                {
                    data: "fcNombreServicio",
                    className: "td-responsive",
                },
                {
                    data: "fcPais",
                    className: "td-responsive",
                },
                {
                    data: "fcRegion",
                    className: "td-responsive",
                },
                {
                    data: "fcCiudad",
                    className: "td-responsive",
                },
                {
                    data: "fcLongitudLatitud",
                    className: "td-responsive",
                },
                {
                    data: "fiSLA",
                    className: "td-responsive",
                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data) {
                        return moment(data.fdFechaAlarmaDeteccion).locale('es').format('YYYY/MM/DD hh:mm a')
                    }
                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data) {
                        return moment(data.fdFechaCreacion).locale('es').format('YYYY/MM/DD hh:mm a')
                    }
                },
                {
                    data: null,
                    className: "td-responsive",
                    render: function (data) {
                        return moment(data.fdFechaUltimaModificacion).locale('es').format('YYYY/MM/DD hh:mm a')
                    }
                },
                {
                    data: "fcUsuarioModificador",
                    className: "td-responsive",
                },

                {
                    data: null,
                    className: "td-responsive",
                    render: function (data, type, row) {

                        var ahora = new Date();
                        var fechaInicio = new Date(moment(data.fdFechaCreacion).locale('es').format('YYYY/MM/DD hh:mm a'));
                        var diferencia = ahora.getTime() - fechaInicio.getTime();

                        // Calcula los segundos, minutos, horas y días transcurridos
                        var segundos = Math.floor(diferencia / 1000);
                        var minutos = Math.floor(segundos / 60);
                        var horas = Math.floor(minutos / 60);
                        var dias = Math.floor(horas / 24);

                        var tiempototal = '';
                        if (dias > 0) {
                            tiempototal += `${dias} <b>Di.</b>, `;
                        }
                        //console.log((horas % 24))
                        if ((horas % 24) > 0) {
                            tiempototal += `${horas % 24} <b>Ho.</b>, `;
                        }
                        if ((minutos % 60) > 0) {
                            tiempototal += `${minutos % 60} <b>Mi.</b>, `;
                        }
                        // Realizar cualquier operación o cálculo necesario para actualizar el valor
                        var nuevoValor = `${tiempototal} ${segundos % 60} <b>Seg.</b>`; // Por ejemplo, aumentar el valor actual en 1

                        return nuevoValor;
                        //return "Han transcurrido " + dias + " días, " + horas % 24 + " horas, " + minutos % 60 + " minutos, " + segundos % 60 + " segundos.";
                    }
                },

                {
                    data: "fcMotivoPausa",
                    className: "td-responsive",
                    visible: true

                }

            ],
            "columnDefs": [
                { "width": "200px", "targets": 0 }, // Ancho específico para la primera columna (evitada)
                { "width": "600px", "targets": "_all" } // Ancho fijo para el resto de las columnas
            ],
            "createdRow": function (row, data, dataIndex) {
                $('td', row).each(function (index) {
                    if (index > 0) { // Evitar la primera columna
                        var originalText = $(this).text();
                        if (originalText.length > 100) {
                            var truncatedText = originalText.substring(0, 100) + '...';
                            $(this).attr('data-full-text', originalText);
                            $(this).text(truncatedText).addClass('text-overflow');
                        }
                    }
                });
            },
            initComplete: function (settings, json) {
                // Reordena la tabla al finalizar la carga
                tablaPrincipalticket.order([2, 'desc']).draw();
            }
            


        }).columns.adjust();

        chat.client.agregarrow = function (modelo) {
            //console.log(modelo);
            var tabla = $.fn.dataTable.Api("#TablaPrincipalTicket");
            tabla.row.add(modelo).draw(false);
        }

        chat.client.actualizarBandeja = function (ticket) {
            //console.log(ticket);

            var tabla = $.fn.dataTable.Api("#TablaPrincipalTicket");
            var nodes = tabla.rows().nodes().toArray();
            var node = nodes.find(x => tabla.row(x).data().fiIDRequerimiento == ticket.fiIDRequerimiento);
            tabla.row(node).data(ticket).draw(false);

        }

        chat.client.eliminarrow = function (idequifax) {
            var tabla = $.fn.dataTable.Api("#TablaPrincipalTicket");
            var nodes = tabla.rows().nodes().toArray();
            var node = nodes.find(x => tabla.row(x).data().fiIDRequerimiento == idequifax);

            tabla.row(node).remove().draw(false);
        }

        chat.client.agregarrowTicketCerrado = function (modelo) {
            var tabla = $.fn.dataTable.Api("#TablaPrincipalTicketCerrados");
            tabla.row.add(modelo).draw(false);
        }



        
        chat.client.agregarrowTicketCancelado = function (modelo) {
            var tabla = $.fn.dataTable.Api("#TablaPrincipalTicketCancelados");
            tabla.row.add(modelo).draw(false);
        }


        
        function EliminarTicket(idticket) {

            bootbox.confirm({
                title: `<i class="" fa-times-circle text-danger mr-2'></i> Esta Seguro que desea Eliminar Este Incidente <span class='fw-500'></span>`,
                message: "<span><strong>Advertencia!:</strong> Esta Accion no se puede Reversar</span>",
                centerVertical: true,
                swapButtonOrder: true,
                buttons: {
                    confirm: {
                        label: 'Si',
                        className: 'btn-danger shadow-0'
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-default'
                    }
                },
                className: "modal-alert",
                closeButton: false,
                callback: function (result) {
                    //console.log(result)
                    if (result == true) {

                    $.ajax({
                        url: "@Url.Action("EliminarTicket", "Ticket")",
                        type: "POST",
                        data: { idticket: idticket },
                        success: function (datas) {
                            //console.log(datas);
                            var resultado = datas[0];

                            if (datas.Estado) {
                                tablaPrincipalticket.ajax.reload().draw(false);
                                return ToastrSuccess("Exito!", "Incidente Eliminado Exitosamente");

                                @*$.ajax({
                                    url: "@Url.Action("GuardarBitacorahistorial", "Ticket")",
                                    type: "POST",
                                    data: { IdSolicitud: idsol, IdCliente: idclien, Observaciones: "Se Elimino el Ticket" },
                                    success: function (respuesta) {
                                        var dataerror = { Titulo: "Exito", Mensaje: "Ticket Eliminado con Exito", Estado: true }
                                        AlertaAjax(dataerror)
                                        CerrarSuitAlert();
                                    },
                                    error: function (respuesta) {
                                        var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Eliminar el Ticket", Estado: false }
                                        AlertaAjax(dataerror)
                                    }
                                })*@
                            }


                        },
                        error: function (datae) {
                            var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Eliminar el Incidente", Estado: false }
                            AlertaAjax(dataerror)
                        }
                    })
                    }
                    if (result == false) {

                    }
                }
            });

        }

        function ProcesosEstados(Ticket) {
            debugger;
            //ShowLeftModal('3○', 'titulo');

            @*$.ajax({
                url: "@Url.Action("ModalBitacora", "Ticket")",
                method: "get",
                data: { id: Ticket },
                success: function (resp) {
                    ShowModalBig(resp);
                },
                error: function (resp) {
                    AlertaError();
                }
            });*@
            $.ajax({
                url: "@Url.Action("ModalBitacoraMejora", "Ticket")",
                method: "get",
                data: { id: Ticket },
                success: function (resp) {
                    ShowLeftModal(resp,"Recorrido Ticket");
                },
                error: function (resp) {
                    AlertaError();
                }
            });
        }

        function CrearTicket() {

            VerModalScrollConObjetoDeParametro({}, "@Url.Action("RegistrarTicket", "Ticket")");

        }

        function AsignarArea(idticket,idestadoticket) {
            $.ajax({
                url: "@Url.Action("VistaActualizarArea", "Ticket")",
                type: "POST",
                data: { idticket: idticket, estadoticket: idestadoticket},
                success: function (datas) {

                    ShowModal(datas);
                },
                error: function (datae) {
                    var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Actualizar El Area", Estado: false }
                    AlertaAjax(dataerror)
                }
            });
        }

        function AsignarUsuario(ticket,idestadoticket, area) {
            $.ajax({
                url: "@Url.Action("VistaAsignarUsuario", "Ticket")",
                type: "POST",
                data: { idticket: ticket, estadoticket: idestadoticket, idarea: area},
                success: function (datas) {
                    ShowModal(datas);
                },
                error: function (datae) {
                    var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Asignar un Usuario", Estado: false }
                    AlertaAjax(dataerror)
                }
            });
        }

        function ActualizarTicket(idtickets,idestadoticket) {

            $.ajax({
                url: "@Url.Action("ActualizarTicket", "Ticket")",
                type: 'Get',
                data: { idticket: idtickets},
                success: function (data) {
                    ShowModalBigScroll(data)
                }, error: function (data) {

                    var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Actualizar el Incidente", Estado: false }
                    AlertaAjax(dataerror)
                }
            });

            //VerModalScrollConObjetoDeParametro({}, "@Url.Action("ActualizarTicket", "Ticket")")
        }

        //tablaPrincipal.columns(7).search(this.value).draw();

        setInterval(function () {
            // Obtener la instancia de DataTable
            var tabla = $('#TablaPrincipalTicket').DataTable();

            // Obtener los datos de la columna específica
            var datosColumna = tabla.column(18).data();

            // Actualizar los datos de la columna
            datosColumna.each(function (valorActual, indice) {

                //console.log(valorActual);
                var ahora = new Date();
                var fechaInicio = new Date(moment(valorActual.fdFechaCreacion).locale('es').format('YYYY/MM/DD hh:mm a'));
                var diferencia = ahora.getTime() - fechaInicio.getTime();

                // Calcula los segundos, minutos, horas y días transcurridos
                var segundos = Math.floor(diferencia / 1000);
                var minutos = Math.floor(segundos / 60);
                var horas = Math.floor(minutos / 60);
                var dias = Math.floor(horas / 24);

//                return `${dias} <b>Di.</b>, ${horas % 24} <b>Ho.</b>, ${minutos % 60} <b>Mi.</b>, ${segundos % 60} <b>Seg.</b>`;
                var tiempototal = '';
                if (dias > 0) {
                    tiempototal += `${dias} <b>Di.</b>, `;
                }
                //console.log((horas % 24))
                if ((horas % 24) > 0 ) {
                    tiempototal += `${horas % 24} <b>Ho.</b>, `;
                }
                if ((minutos % 60) > 0) {
                    tiempototal += `${minutos % 60} <b>Mi.</b>, `;
                }
                // Realizar cualquier operación o cálculo necesario para actualizar el valor
                var nuevoValor = `${tiempototal} ${segundos % 60} <b>Seg.</b>`; // Por ejemplo, aumentar el valor actual en 1

                // Actualizar el valor en la columna
                tabla.cell({ row: indice, column: 18 }).data(nuevoValor);
            });

            // Redibujar la tabla para reflejar los cambios
            tabla.draw(false); // Puedes pasar false para evitar que la tabla se redibuje con animación
        }, 100000); // Ejecutar cada minuto segundos

        //setInterval(function () {
        //    location.reload();
        //}, 300000);

        function VerDetalleTicket(idticket) {

            $.ajax({
                url: "@Url.Action("DetalleTicket", "Ticket")",
                type: 'Get',
                data: { idticket: idticket},
                success: function (data) {
                    ShowModalBigScroll(data)
                }, error: function (data) {

                    var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Ver el Detalle del Incidente", Estado: false }
                    AlertaAjax(dataerror)
                }
            });
        }


        const updateSelectionInPlace = (array, ids) => { // para agregar servicios o los cis para que se modifique e identificar cuales son los que selecciono
            array.forEach(item => {
                item.select = ids.includes(item.fiIDServicio);
            });
        };


        function addOrUpdateItems(array, newItem) { // esta funcion busca dentro de la lista si existe el registro como tal, si no lo hace pues lo agrega, en caso de encontrarlo lo deja tal cual esta
            debugger
            // Buscar el índice del objeto con el mismo id
            let index = array.findIndex(item => item.id === newItem.id); // aqui la lista tiene que tener lo que viene siendo el id para poder identificar la lista en concreto

            if (index === -1) {
                // Si el objeto no existe, agregarlo
                array.push(newItem);
                //console.log('Item added:', newItem);
            } else {
                // Si el objeto existe, actualizarlo
                array[index] = newItem;
                //console.log('Item updated:', newItem);
            }
        }


        function addOrUpdateItem(array, items) {
            items.forEach(newItem => {
                let index = array.findIndex(item => item.id === newItem.id);

                if (index === -1) {
                    array.push(newItem);
                    //console.log('Item added:', newItem);
                } else {
                    array[index] = newItem;
                    //console.log('Item updated:', newItem);
                }
            });
        }

        function ver(iticket) {

        }

        $('#TablaPrincipalTicket tbody').on('click', 'a.details-productos', function() {
        console.log(`aqui entro con el datatable onclick`);

        var i = $(this).find("i");
        var tr = $(this).closest('tr');
        var row = table.row(tr);
        var data = table.row(row).data();

        if (row.child.isShown()) {
            // Esta fila ya está abierta - ciérrala
            row.child('');
            row.child.hide();
            tr.removeClass('info');
            $(i).removeClass("fa-minus text-danger").addClass("fa-plus text-success");
        } else {
            //row.child("Test").show();
            $(i).removeClass("fa-plus text-success").addClass("fa-minus text-danger");

            $.ajax({
                url: '@Url.Action("SubTablaIncidentesTicket", "Ticket")',
                data: { idticket: data.idticket },  // Asegúrate de pasar el ID correcto
                type: 'GET',
                success: function(response) {
                    row.child(response).show();
                    tr.addClass('info');
                },
                error: function(error) {
                    console.log(error);
                    AlertaError();
                }
            });
        }
    });

        $(document).on('mouseenter', 'td.text-overflow', function () {
            var fullText = $(this).attr('data-full-text'); // Obtiene el texto completo
            $(this).text(fullText);  // Muestra el texto completo
        });

        $(document).on('mouseleave', 'td.text-overflow', function () {
            var fullText = $(this).attr('data-full-text');
            var truncatedText = fullText.substring(0, 100) + '...'; // Vuelve a truncar
            $(this).text(truncatedText);  // Muestra el texto truncado de nuevo
        });


        $('#ddlEstados').on('change', function () {
            debugger;

            tablaPrincipalticket.columns(1).search(this.value).draw();
            tablaPrincipalticket.order([2, 'asc']).draw();
            tablaPrincipalticket.order([2, 'desc']).draw();
            document.querySelectorAll('[tabindex]').forEach(element => {
                element.removeAttribute('tabindex');
            });
        });

        

    </script>

}
