
<style>


    .img-container {
        width: 100%;
        height: 220px;
        background-image: repeating-linear-gradient(45deg,#ccc,#ccc 10px, #dbdbdb 10px, #dbdbdb 20px);
        text-align: center;
    }

        .img-container::before {
            content: "\f03e";
            font-family: "Font Awesome 5 Pro";
            font-size: 150px;
            opacity: 0.3;
        }


    /* Estilos del contenedor del switch */
    .switch-wrapper {
        display: flex;
        align-items: center;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 30px;
        margin-right: 10px;
    }

        /* Ocultar el checkbox original */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* Estilos del fondo del switch */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 34px;
    }

        /* Botón interior que se desliza */
        .slider:before {
            position: absolute;
            content: "";
            height: 24px;
            width: 24px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

    /* Cuando el checkbox está marcado */
    input:checked + .slider {
        background-color: #4caf50; /* Color de fondo para "Sí" */
    }

        input:checked + .slider:before {
            transform: translateX(30px); /* Mueve el botón a la derecha */
        }

    /* Texto para "Sí" y "No" */
    .switch-label {
        font-size: 16px;
        font-weight: bold;
    }

    .switch-text {
        display: inline-block;
        width: 150px;
        text-align: left;
    }
</style>

<div class="modal-header bg-primary-600 bg-primary-gradient" >
    <h2 class="modal-title text-white">
        
        <text>Crear Incidente</text>    
    
    </h2>
    
    <button type="button" class="close" data-dismiss="modal">
        <i class="fal fa-times-circle fa-fw fa-lg"></i>
    </button>
</div>

<div class="modal-body">
    <div class="row">

        <div class="col-lg-12">
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-form-label">Titulo</label>
                        <input id="txtNombreTitulo" class="form-control" type="text" placeholder="Definicion del titulo" />
                    </div>
                </div>

                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-form-label">Descripcion</label>
                        <input id="txtdescripcion" class="form-control" type="text" placeholder="Definicion del ticket" />
                    </div>
                </div>
                <!--<div class="col-sm-12">-->
                <!--esto debe de ser un select -->
                <!--<div class="form-group">
                <label class="col-form-label">Area</label>
                <input id="txtNombreTitulo" class="form-control" type="text" placeholder="Defina un Area" />
                    </div>
                </div>-->

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Tipo Categoria</label>
                        <select id="seleccategoria" class="form-select form-control">
                        </select>
                    </div>

                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Tipo Sub Categoria</label>
                        <select id="selectincidencia" class="form-select form-control">
                        </select>
                    </div>

                </div>

                <div class="col-lg-4">
                    <div class="form-group">
                        <label class="col-form-label">Urgencia</label>
                        <select id="selectUrgencia" class="form-select form-control">
                        </select>
                    </div>

                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label class="col-form-label">Impacto</label>
                        <select id="selectImpacto" class="form-select form-control">
                        </select>
                    </div>

                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label class="col-form-label">Prioridad</label>
                        <select id="PrioridadSelect" class="form-select form-control" readonly>
                        </select>
                    </div>

                </div>

                <div class="col-lg-6" style="display:none">
                    <div class="form-group">
                        <label class="col-form-label">Asignar a</label>
                        <select id="selectasignar" class="form-select form-control">
                        </select>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="form-group">
                        <label class="col-form-label">Incidente Padre</label>
                        <select id="ticketpadre" class="form-select form-control" readonly>
                        </select>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label class="col-form-label">Deteccion Alarma</label>
                        <input id="deteccionalarma" class="form-control" type="datetime-local" />
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label class="col-form-label">Plataforma</label>
                        <select id="ticketplataforma" class="form-select form-control">
                        </select>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Servicios Afectados</label>
                        <button onclick="AgregarServicios()" class="form-control btn btn-success">Agregar Servicios</button>
                    </div>
                    <div id="tbodyservicios">

                    </div>
                    
                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Ci</label>
                        <button onclick="AgregarCI()" class="form-control btn btn-success">Agregar CI</button>

                    </div>
                    <div id="tbodycis">

                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="form-group">
                        <label class="col-form-label">Comentario</label>
                        <input id="txtcomentario" class="form-control" type="text" placeholder="Escriba un comentario para este Ticket" />
                    </div>
                </div>

            </div>
        </div>
        

        <div class="col-lg-12">
            
            <div class="form-group">
                <div class="row">
                    
                    <div class="col-lg-12">
                        <div class="form-group">

                            <br />
                            <label class="switch">
                                <input type="checkbox" id="toggle">
                                <span class="slider"></span>
                            </label>
                            <span class="switch-label">
                                <span class="switch-text" id="toggleText">PDF e Imagenes</span>
                            </span>
                        </div>
                        <div class="form-group" id="divImagenes">
                            <label class="control-label">DOCUMENTO (Suba imagenes,Word,Excel,Pdf para este ticket) </label>

                            <form id="Imagen-dropzone" action="@Url.Action("FormFileResponse","Base")" method="post" enctype="multipart/form-data" class="dropzone needsclick">
                                <div class="dz-message needsclick">

                                    <div class="dz-icon">
                                        <i class="fal fa-cloud-upload text-muted mb-3"></i>
                                    </div>
                                    <div>
                                        <span class="dz-text">Arrastre Imagen</span>
                                        <p class="text-sm text-muted">O Click para elegirla manualmente</p>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="form-group" id="divVideo" style="display:none">
                            <div id="selfievalidacion" class="container">
                                <button class="btn btn-success centrado" onclick="document.getElementById('getFile2').click()">Subir Video</button>
                                <input type="file" accept="Video/*" capture="camera" id="getFile2" style="display:none" onchange="previewVideo(event)">
                            </div>
                            <div class="video-preview" style="margin-top: 20px;">
                                <video id="videoPreview" width="320" height="240" controls style="display:none;">
                                    <source src="" type="video/mp4">
                                    Tu navegador no soporta la etiqueta de video.
                                </video>
                            </div>
                        </div>
                    </div>
            </div>
        </div>



        <!--Comentario del ticket-->

        <div class="col-lg-6">
            <div class="row">

            </div>
        </div>



    </div>

    <div class="row">
        <!--<div class="col-lg-6">-->
            <!--esto debe de ser un select -->
            <!--<div class="form-group">

                <label class="col-form-label">Estado</label>
                <input id="txtNombreTitulo" class="form-control" type="text" placeholder="Defina un Estado" />
            </div>
        </div>-->

        
    </div>

    <div class='test col-sm-12'>
        <br />
        <div style='float: right;'>
            <button type="button" id="btnGuardarRequerimientoEnviar" class="btn btn-success">
                Guardar Incidente
            </button>
        </div>
    </div>
</div>

<script>
    var Validador = 0;
    const toggle = document.getElementById("toggle");
    const toggleText = document.getElementById("toggleText");

    function previewVideo(event) {
        var video = document.getElementById('videoPreview');
        var file = event.target.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
            video.style.display = 'block';
            video.src = e.target.result;
        };

        if (file) {
            reader.readAsDataURL(file);
        }
    }
    // Cambiar el texto entre "Sí" y "No" cuando se cambia el estado del toggle
    toggle.addEventListener("change", function () {
        if (toggle.checked) {
            Validador = 1
            $('#divImagenes').css('display', 'none');
            $('#divVideo').css('display', 'block');
            toggleText.textContent = "Video";
        } else {
            Validador = 0
            $('#divImagenes').css('display', 'block');
            $('#divVideo').css('display', 'none');
            toggleText.textContent = "PDF e Imagenes";
        }
    });

    var fotosredimencionadas = [];

    select();
    UrgenciaSelect();
    ImpactoSelect();

    var idserviciosusados = [];
    var idCisusados = [];

    var idservicios = [];
    var idCis = [];


    function ImpactoSelect()
    {
        $.ajax({
            url: "@Url.Action("SelectImpacto", "LlenarCampos")",
            type: "GET",
            success: function (respuesta) {

                var selectcategoria = $("#selectImpacto");

                selectcategoria.empty();
                selectcategoria.append($('<option>', {
                    value: 0,
                    text: 'Seleccione Impacto'
                }));
                $("#selectImpacto").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectcategoria.append($('<option>', {
                        value: item.fiNivel,
                        text: item.fcDescripcionImpacto
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
    }

    $(`#selectUrgencia`).on('change', function () {
        debugger
        var Urgencia = $("#selectUrgencia option:selected").val();
        var Impacto = $("#selectImpacto option:selected").val();

        if (Urgencia != 0 && Impacto != 0)
        {
            $.ajax({
            url: "@Url.Action("SelectPrioridad", "LlenarCampos")",
            type: "GET",
                data: { Urgencia: Urgencia, Impacto: Impacto },
            success: function (respuesta) {

                var selectIncidencia = $("#PrioridadSelect");

                selectIncidencia.empty();

                $("#PrioridadSelect").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectIncidencia.append($('<option>', {
                        value: item.fiPrioridad,
                        text: item.fcPrioridad
                    }));
                });
                $("#PrioridadSelect").prop("disabled", true);
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
        }

    })

    $(`#selectImpacto`).on('change', function () {
        debugger
        var Urgencia = $("#selectUrgencia").val();
        var Impacto = $("#selectImpacto").val();
        console.log(`impacto: ${Impacto} `);
        console.log(`urgencia: ${Urgencia} `);
        if (Impacto == null || Impacto == 0 || Impacto == "" || Urgencia == 0 || Urgencia == "" || Urgencia == null ) {
            console.log(`Entro en el if`);
        }else
        //if (Urgencia != 0 && Impacto != 0)
        {
            console.log(`tambien entro en el esle`);
            $.ajax({
            url: "@Url.Action("SelectPrioridad", "LlenarCampos")",
            type: "GET",
            data: { Urgencia: Urgencia, Impacto: Impacto },
            success: function (respuesta) {

                var selectIncidencia = $("#PrioridadSelect");

                selectIncidencia.empty();

                $("#PrioridadSelect").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectIncidencia.append($('<option>', {
                        value: item.fiPrioridad,
                        text: item.fcPrioridad
                    }));
                });
                $("#PrioridadSelect").prop("disabled", true);
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
        }

    })

    function UrgenciaSelect()
    {
        $.ajax({
            url: "@Url.Action("SelectUrgencia", "LlenarCampos")",
            type: "GET",
            success: function (respuesta) {

                var selectcategoria = $("#selectUrgencia");

                selectcategoria.empty();
                selectcategoria.append($('<option>', {
                    value: 0,
                    text: 'Seleccione Urgencia'
                }));
                $("#selectUrgencia").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectcategoria.append($('<option>', {
                        value: item.fiNivel,
                        text: item.fcDescripcionUrgencia
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
    }

    function select() {

        $.ajax({
            url: "@Url.Action("SelectCategorias", "LlenarCampos")",
            type: "GET",
            success: function (respuesta) {

                var selectcategoria = $("#seleccategoria");

                selectcategoria.empty();
                selectcategoria.append($('<option>', {
                    value: 0,
                    text: 'Defina un Tipo Categoria'
                }));
                $("#seleccategoria").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectcategoria.append($('<option>', {
                        value: item.fiIDTipoRequerimiento,
                        text: item.fcTipoRequerimiento
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });

        $.ajax({
            url: "@Url.Action("SelecticketPadrese", "LlenarCampos")",
            data: { idticket: 0},
            type: "GET",
            success: function (respuesta) {

                var selectpadre = $("#ticketpadre");

                selectpadre.empty();
                selectpadre.append($('<option>', {
                    value: 0,
                    text: 'Seleccione un Ticket Padre en caso que lo tenga'
                }));
                $("#ticketpadre").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectpadre.append($('<option>', {
                        value: item.fiIDRequerimiento,
                        text: item.fcTituloRequerimiento
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });


        $.ajax({
            url: "@Url.Action("SelectPlataforma", "LlenarCampos")",
            data: { idticket: 0},
            type: "GET",
            success: function (respuesta) {

                var selectplataforma = $("#ticketplataforma");

                selectplataforma.empty();
                selectplataforma.append($('<option>', {
                    value: 0,
                    text: 'Seleccione Una Plataforma'
                }));
                $("#ticketplataforma").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectplataforma.append($('<option>', {
                        value: item.fiIDPlataforma,
                        text: item.fcNombrePlataforma
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });

        $.ajax({
            url: "@Url.Action("SelectServiciosAfectados", "LlenarCampos")",
            data: { idticket: 0},
            type: "GET",
            success: function (respuesta) {

                var selectservicios = $("#ticketservafectados");

                selectservicios.empty();
                selectservicios.append($('<option>', {
                    value: 0,
                    text: 'Seleccione Un Servicio'
                }));
                $("#ticketservafectados").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function (index, item) {
                    idservicios.push({ select: false, fiIDServicio: item.fiIDServicio, fcNombreServicio: item.fcNombreServicio})
                    selectservicios.append($('<option>', {
                        value: item.fiIDServicio,
                        text: item.fcNombreServicio
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });

        @*$.ajax({
            url: "@Url.Action("SelectServiciosCI", "LlenarCampos")",
            data: { idticket: 0},
            type: "GET",
            success: function (respuesta) {

                $.each(respuesta, function (index, item) {
                    idCis.push({
                        select: false,
                        fcPais: item.fcPais,
                        fcRegion: item.fcRegion,
                        fcCiudad: item.fcCiudad,
                        fcCI: item.fcCI,
                        fiIDConfiguracion: item.fiIDConfiguracion,
                        fcConfiguracion: item.fcConfiguracion,
                        fcLatitud: item.fcLatitud,
                        fcLongitud: item.fcLongitud
                    })

                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });*@

    }

    function GuardarDocumentos(IdRequerimiento) {
        debugger
        //const form = new FormData();

        //form.append("idDocumento", 1);
        var mod = [];

        var cont = 0;
        if (fotosredimencionadas.length < 1) {
            //var datasus = { Titulo: "Exito", Mensaje: "Ticket Guardado correctamente", Estado: true }
            //AlertaAjax(datasus)
            location.reload();
            return 0;
        }

        for (const item of fotosredimencionadas) {
            mod.push({ piIDRequerimiento: IdRequerimiento, pcTipoArchivo: item.tipoarchivo, pcNombreArchivo: item.nombreArchivo, pcRutaArchivo: item.base, piIDSesion: 1, piIDApp: 1, pcURL: "-", pbEsImagen: item.pbEsImagen });

        }


        $.ajax({
            url: "@Url.Action("Guardardocumentos", "Ticket")",
            type: "POST",
            data: { modelo: mod },

                timeout: 800000,
            success: function (data) {
                ToastrSuccess("Exito!", "Documentos guardados correctamente");
                //var datasus = { Titulo: "Exito", Mensaje: "Documentos guardados correctamente", Estado: true }
                //AlertaAjax(datasus)

                location.reload();

            },
            error: function (e) {
                ToastrError("Erro!", "Error Al querer Subir Documentos");
                //var dataerror = { Titulo: "Error", Mensaje: "", Estado: false }
                //AlertaAjax(dataerror)
                console.error(e);

            }
        });


    }


    $(`#seleccategoria`).on('change', function () {
        debugger
        var textcategorias = $("#seleccategoria option:selected").text();

        $.ajax({
            url: "@Url.Action("SelectIncidenciasByCategorias", "LlenarCampos")",
            type: "GET",
            data: { fccategoria: textcategorias},
            success: function (respuesta) {

                var selectIncidencia = $("#selectincidencia");

                selectIncidencia.empty();
                selectIncidencia.append($('<option>', {
                    value: 0,
                    text: 'Defina un Tipo Sub Categoria'
                }));
                $("#selectincidencia").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function(index, item) {
                    selectIncidencia.append($('<option>', {
                        value: item.fiIDTipoRequerimiento,
                        text: item.fcTipoRequerimiento
                    }));
                });
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
    })

    function GuardarRequermiento(id) {
        debugger;
        H5_loading.show();
        var EstadoRequerimiento = id;
        var urg = $(`#selectUrgencia`).val();
        var imp = $(`#selectImpacto`).val();
        var Video = $(`#getFile2`).val();
        console.log(`urgencia = ${urg} impato = ${imp}`);

        if (archivosSubidos.length < 1 && Validador == 0) {
            ToastrError("Error", "Suba aun que sea 1 documento");
            $(`#btnGuardarRequerimientoEnviar`).prop("disabled", false);
            return 0;
        }

        if (Video == "" && Validador == 1) {
            ToastrError("Error", "Suba 1 Video");
            $(`#btnGuardarRequerimientoEnviar`).prop("disabled", false);
            return 0;
        }

        if ($("#selectImpacto").val() == 0 || $("#selectUrgencia").val() == 0 || $("#seleccategoria").val() == 0 || $("#ticketplataforma").val() == 0 || $("#ticketservafectados").val() == 0 || $("#selectincidencia").val() == 0) {
            $(`#btnGuardarRequerimientoEnviar`).prop("disabled", false);
            return ToastrError("Error", "Llene todos los campos");

        }
        if (idCis.length < 1) {
            $(`#btnGuardarRequerimientoEnviar`).prop("disabled", false);
            return ToastrError("Error", "Agregue al Menos un Ci");
        }



        var comentario = $("#txtcomentario").val();
        if (comentario == "" || comentario == null) {
            H5_loading.hide();
            $(this).prop("disabled", false);
            return ToastrError("Error", "Escriba un comentario");
            
        }
        var listaservicios = [];
        for (const item of idservicios) {
            if (item.select == true) {
                listaservicios.push(item.fiIDServicio);
            }
        }
        var listacis = [];
        for (const item of idCis) {
            listacis.push(item.id);
        }

        var formData = new FormData();

        // Convertir la lista de imágenes en JSON y añadirla como un campo
        var listaimagenesJSON = JSON.stringify(archivosSubidos);
        //console.log(listaimagenesJSON.length);
        formData.append("fcListadoImagenes", listaimagenesJSON);

        // Agregar los otros campos del objeto `ticket` al FormData
        formData.append("fiIDEstadoRequerimiento", EstadoRequerimiento);
        formData.append("fcTituloRequerimiento", $("#txtNombreTitulo").val());
        formData.append("fcDescripcionRequerimiento", $("#txtdescripcion").val());
        formData.append("fiTipoRequerimiento", $("#selectincidencia").val());
        formData.append("fiIDImpacto", $(`#selectImpacto`).val());
        formData.append("fiIDUrgencia", $(`#selectUrgencia`).val());
        formData.append("fiIDPrioridad", $(`#PrioridadSelect`).val());
        formData.append("fiIdTicketPadre", $(`#ticketpadre`).val());
        formData.append("fdFechaAlarmaDeteccion", $(`#deteccionalarma`).val());
        formData.append("fiPlataforma", $(`#ticketplataforma`).val());
        formData.append("fiServicioAfectados", $(`#ticketservafectados`).val());
        formData.append("fiIdTicketPadre", $(`#ticketpadre`).val());
        formData.append("fccomentario", $("#txtcomentario").val());
        
        // Serializar la lista como JSON
        for (const item of listaservicios) {
            formData.append("serviciosAfectados", item);
        }
        for (const item of listacis) {
            formData.append("Ciaguardar", item);
        }
        //formData.append("serviciosAfectados", JSON.stringify(listaservicios));
        //formData.append("Ciaguardar", JSON.stringify(listacis));




        H5_loading.show();
        $.ajax({
            url: "@Url.Action("GuardarTicket", "Ticket")",
            type: "POST",
            data: formData,
            contentType: false, // Necesario para enviar FormData
            processData: false, // Evita el procesamiento de datos
            error: function (result) {
                console.log(`error`);
                $(this).prop("disabled", false);
                ToastrError("Error", "No se guardo el Incidente, Contacte con el Administrador");
                H5_loading.hide();

                //var dataerror = { Titulo: "Error", Mensaje: "No se guardo el Incidente, Contacte con el Administrador", Estado: false }
                //AlertaAjax(dataerror)
            },
            success: function (data) {
                console.log(data);
                //window.location.href ="@Url.Action("Index", "Ticket")"
                if (data.fiMensaje == "1") {
                    if (Validador == 0) {
                        GuardarDocumentos(data.IdIngresado);
                    }
                    else if (Validador == 1)
                    {
                        MandarVideo(data.IdIngresado);
                    }
                    H5_loading.hide();
                    window.location.reload();
                    CerrarModal();
                    return ToastrSuccess("Exito", "Ticket Registrado Correctamente");
                }
            }
        });

    }

    function MandarVideo(IdSolicitud)
    {
        debugger;
        var form_data = new FormData();
        form_data.append("img", $("#getFile2")[0].files[0]);
        form_data.append("idSolicitd", IdSolicitud);
        $.ajax({
                url: "@Url.Action("GuardarVideo", "Ticket")",
                type: 'POST',
            data: form_data,
            timeout: 800000,
                cache: false,
                contentType: false,
                processData: false,
                enctype: "multipart/form-data",
                success: function (data) {
                    ToastrSuccess("Listo!", "Subido correctamente");
                    location.reload();

                }, error: function () {
                    ToastrError("Error", "Falta subir la data para el envio Masivo");


                }
            });
    }

    var archivosSubidos = []; // Array para guardar los archivos

    myDropzone = $('#Imagen-dropzone').dropzone({
        autoProcessQueue: true,
        uploadMultiple: true,
        acceptedFiles: "image/*,.pdf,.doc,.docx,.xls,.xlsx,.rar,.zip,.7z",
        addRemoveLinks: true,
        dictMaxFilesExceeded: "Maximum upload limit reached",
        dictInvalidFileType: "Invalid file type",

        init: function () {
            var myDropzone = this;

            // Limitar a 1 archivo máximo si se desea
            myDropzone.on('maxfilesexceeded', function (file) {
                this.removeAllFiles();
                this.addFile(file);
            });

            // Manejar cada archivo agregado
            myDropzone.on('addedfile', function (file) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    // Obtener solo la parte base64 después de la coma
                    var base64String = e.target.result.split(',')[1];
                    var tipoarchivo = file.type.split('/')[0]; // Identificar tipo general (image, video, etc.)

                    // Agregar al array con los detalles requeridos
                    archivosSubidos.push({
                        fcNombreArchivo: file.name,
                        fcbase64: base64String,
                        fcExtension: file.name.split('.').pop(), // Obtener extensión del archivo
                        fbEsImagen: tipoarchivo === "image" // True si es una imagen
                    });
                    var prueba = JSON.stringify(archivosSubidos);
                    //console.log(prueba.length);
                    //console.log(archivosSubidos); // Ver el array en consola
                };

                // Leer cualquier tipo de archivo como base64
                reader.readAsDataURL(file);
            });

            // Remover archivo de la vista y del array al quitarlo
            myDropzone.on('removedfile', function (file) {
                var index = archivosSubidos.findIndex(f => f.nombreArchivo === file.name);
                if (index !== -1) archivosSubidos.splice(index, 1);

                var _ref = file.previewElement;
                return _ref != null ? _ref.parentNode.removeChild(file.previewElement) : void 0;
            });
        }
    });



    $("#btnGuardarRequerimientoEnviar").click(function (e) {
        $(this).prop("disabled", true);
        GuardarRequermiento(1);
        //GuardarDocumentos(22)
    });

    function RedimencionarImagen(idcanva, eimagencaptada, idimg, NombreArchivo, tipoimagen) {
        debugger;
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d'); // capturamos el id del camva para ponerlo la imagen oculta ahi y asi poder tomar esa imagen y no la que se esta mostrando
        var img = new Image;

        //console.log(eimagencaptada.type);

        img.src = URL.createObjectURL(eimagencaptada); // insertamos la imagen que el cliente subio para posteriormente hacer la reduccion
        img.onload = function () {
            //var canvas = document.getElementById(idcanva);
            var maxAncho = 900; //aqui le ponemos unas medidas estandar que pueden cambiar en un futuro,
            var maxAlto = 1500;
            if ((img.width * img.height) > (maxAncho *maxAlto)) {
                var proporcion = Math.min(maxAncho / img.width, maxAlto / img.height); // aqui hacemos una proporcion de las imagenes con respecto al tamaño de la imagen original y al estandar que tenemos nosotros aqui adentro
                var propdos = img.width / img.height;
                var ancho = img.width * proporcion;
                var alto = img.height * proporcion;

                canvas.width = (img.width / propdos); // ponemos el tamaño en el canva oculto
                canvas.height = (img.height / propdos);

                ctx.drawImage(img, 0, 0, (img.width / propdos), (img.height / propdos));
                //console.log(canvas.toDataURL('image/jpeg', 0.7)); // tira el base 64


                //console.log(canvas.toDataURL('image/jpeg', 0.7)); // aqui para saber el base64 de la imagen
            }
            else
            {
                canvas.width = (img.width); // ponemos el tamaño en el canva oculto
                canvas.height = (img.height);

                ctx.drawImage(img, 0, 0, (img.width ), (img.height));
            }
            var urlbase64 = getBase64Image(img); // tira el base 64
            fotosredimencionadas.push({ base: canvas.toDataURL('image/jpeg', 0.75), nombreArchivo: NombreArchivo, tipoarchivo: tipoimagen, pbEsImagen: true});
            return ctx;
            //document.getElementById(idimg).src = canvas.toDataURL('image/jpeg', 0.7); // el 07 es la calidad de la imagen si no estoy mal eso decia en la documentacion
            //document.getElementById(idcanva).style.display = "block"; //mostrar la imagen que esta oculta
        }
    }

    function getBase64Image(img) {
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        var dataURL = canvas.toDataURL();
        return dataURL;
    }

    function AgregarServicios() {
        console.log("entro en ese proceso")
         $.ajax({
                url: "@Url.Action("AgregarServicios", "Ticket")",
                method: "get",
                //data: { id: id },
                success: function (data) {
                    ShowModalSmall(data);
                },
                error: function (resp) {
                    AlertaError();
                }
            });
    }

    function AgregarCI() {
        console.log("entro en ese proceso")
         $.ajax({
                url: "@Url.Action("AgregarCI", "Ticket")",
                method: "get",
                //data: { id: id },
             success: function (data) {
                 ShowModal3(data);
                },
                error: function (resp) {
                    AlertaError();
                }
            });
    }

    $(`#deteccionalarma`).on('change', function () {
        debugger
        console.log(`entro aqui`);
        alarmadeteccion();
    })
    alarmadeteccion();
    function alarmadeteccion() {
        var datetimeInput = document.getElementById("deteccionalarma");

        // Obtener la fecha y hora actual
        var now = new Date();
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0');  // Los meses son base 0
        var day = String(now.getDate()).padStart(2, '0');
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');

        // Formatear la fecha y hora en el formato adecuado para el campo datetime-local
        var currentDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;

        // Establecer el valor máximo del campo datetime-local
        datetimeInput.max = currentDateTime;

        // Validar la fecha y hora cuando el campo pierde el foco
        datetimeInput.addEventListener('blur', function () {
            if (datetimeInput.value > currentDateTime) {
                datetimeInput.value = currentDateTime;
            }
        });
    }
    document.addEventListener("DOMContentLoaded", function () {

    });


</script>
