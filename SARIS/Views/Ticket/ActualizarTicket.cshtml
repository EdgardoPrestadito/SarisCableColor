@model OrionCoreCableColor.Models.Ticket.TicketMiewModel

<style>


    .img-container {
        width: 100%;
        height: 220px;
        background-image: repeating-linear-gradient(45deg,#ccc,#ccc 10px, #dbdbdb 10px, #dbdbdb 20px);
        text-align: center;
    }

        .img-container::before {
            content: "\f03e";
            font-family: "Font Awesome 5 Pro";
            font-size: 150px;
            opacity: 0.3;
        }


    /* Estilos del contenedor del switch */
    .switch-wrapper {
        display: flex;
        align-items: center;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 30px;
        margin-right: 10px;
    }

        /* Ocultar el checkbox original */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* Estilos del fondo del switch */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 34px;
    }

        /* Botón interior que se desliza */
        .slider:before {
            position: absolute;
            content: "";
            height: 24px;
            width: 24px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

    /* Cuando el checkbox está marcado */
    input:checked + .slider {
        background-color: #4caf50; /* Color de fondo para "Sí" */
    }

        input:checked + .slider:before {
            transform: translateX(30px); /* Mueve el botón a la derecha */
        }

    /* Texto para "Sí" y "No" */
    .switch-label {
        font-size: 16px;
        font-weight: bold;
    }

    .switch-text {
        display: inline-block;
        width: 150px;
        text-align: left;
    }
</style>
<div class="modal-header bg-primary-600 bg-primary-gradient">
    <h2 class="modal-title text-white">

        <text>Editar Incidencia</text>

    </h2>

    <button type="button" class="close" data-dismiss="modal" onclick="Recargar()">
        <i class="fal fa-times-circle fa-fw fa-lg"></i>
    </button>
</div>

<div class="modal-body">
    <div class="row">



        <div class="col-lg-12">
            <div class="row">

                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-form-label">Titulo</label>
                        @Html.EditorFor(model => model.fcTituloRequerimiento, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-form-label">Descripcion</label>
                        @Html.EditorFor(model => model.fcDescripcionRequerimiento, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                @if (ViewBag.PuedeEditarCategoria)
                {
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-form-label">Categoria</label>
                            @Html.DropDownListFor(model => model.fiCategoriadeDesarrollo, new SelectList(ViewBag.ListaCategorias, "Value", "Text"), null, new { @class = "form-control input-lg", @style = "width:100%;" })
                        </div>
                    </div>



                    <div class="col-lg-6">
                        <div class="form-group">
                            <label class="col-form-label">Tipo Sub Categoria</label>
                            <select id="selectincidencia" class="form-select form-control">
                            </select>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-form-label">Categoria</label>
                            @Html.DropDownListFor(model => model.fiCategoriadeDesarrollo, new SelectList(ViewBag.ListaCategorias, "Value", "Text"), null, new { @class = "form-control input-lg", @style = "width:100%;", @readonly = "readonly" })
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="form-group">
                            <label class="col-form-label">Tipo Sub Categoria</label>
                            <select id="selectincidencia" class="form-select form-control" style="display: block">
                            </select>
                        </div>

                    </div>
                }


                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-form-label">Estado</label>
                        @Html.DropDownListFor(model => model.fiIDEstadoRequerimiento, new SelectList(ViewBag.Estados, "Value", "Text"), null, new { @class = "form-control input-lg", @style = "width:100%;" })
                    </div>
                </div>

                <div class="col-sm-6" id="iddivmotivo" style="display:none">
                    <div class="form-group">
                        <label class="col-form-label" id="lblMotivo">Motivo</label>
                        <select class="form-select form-control" id="selectmotivo">
                        </select>
                    </div>
                </div>
                <div class="col-sm-6" id="iddivCategoriaResolusion" style="display:none">
                    <div class="form-group">
                        <label class="col-form-label">Categoria de Resolucion</label>
                        <select class="form-select form-control" id="selectCategoriaResolucion">
                        </select>
                    </div>
                </div>
                <div class="col-sm-6" id="iddivSubCategoriaResolusion" style="display:none">
                    <div class="form-group">
                        <label class="col-form-label">Causa de Falla</label>
                        <select class="form-select form-control" id="selectSubCategoriaResolucion">
                        </select>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Incidencia Padre </label>
                        <select id="ticketPadre" class="form-select form-control">
                        </select>
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="col-form-label">Urgencia</label>
                        @Html.EditorFor(model => model.fcDescripcionUrgencia, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="col-form-label">Impacto</label>
                        @Html.EditorFor(model => model.fcDescripcionImpacto, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="col-form-label">Prioridad</label>
                        @Html.EditorFor(model => model.fcDescripcionPrioridad, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="col-form-label">Plataforma</label>
                        @Html.EditorFor(model => model.fcPlataforma, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>


                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="col-form-label">Deteccion de Alarma </label>
                        @Html.EditorFor(model => model.fdFechaAlarmaDeteccion, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="form-group">
                        <label class="col-form-label">Comentario</label>
                        <input id="txtComentario" class="form-control" type="text" placeholder="Escriba un comentario para este Incidente" />
                    </div>
                </div>

            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-lg-12">
            <div class="row">

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Servicios Afectados</label>
                        <button onclick="AgregarServicios()" class="form-control btn btn-success">Agregar Servicios</button>
                    </div>
                    <div id="tbodyservicios">

                    </div>

                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <label class="col-form-label">Ci</label>
                        <button onclick="AgregarCI()" class="form-control btn btn-success">Agregar Ci</button>

                    </div>
                    <div id="tbodycis">

                    </div>
                </div>


            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="row">

                <div class="col-lg-12">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">

                                <br />
                                <label class="switch">
                                    <input type="checkbox" id="toggle">
                                    <span class="slider"></span>
                                </label>
                                <span class="switch-label">
                                    <span class="switch-text" id="toggleText">PDF e Imagenes</span>
                                </span>
                            </div>
                            <div class="form-group" id="divImagenes">

                                <label class="control-label">DOCUMENTO (Suba imagenes,Word,Excel,Pdf para este ticket) </label>

                                <form id="Imagen-dropzone" action="@Url.Action("FormFileResponse","Base")" method="post" enctype="multipart/form-data" class="dropzone needsclick">
                                    <div class="dz-message needsclick">

                                        <div class="dz-icon">
                                            <i class="fal fa-cloud-upload text-muted mb-3"></i>
                                        </div>
                                        <div>
                                            <span class="dz-text">Arrastre Imagen</span>
                                            <p class="text-sm text-muted">O Click para elegirla manualmente</p>
                                        </div>
                                    </div>
                                </form>


                            </div>
                            <div class="form-group" id="divVideo" style="display:none">
                                <div id="selfievalidacion" class="container">
                                    <button class="btn btn-success centrado" onclick="document.getElementById('getFile2').click()">Subir Video</button>
                                    <input type="file" accept="Video/*" capture="camera" id="getFile2" style="display:none" onchange="previewVideo(event)">
                                </div>
                                <div class="video-preview" style="margin-top: 20px;">
                                    <video id="videoPreview" width="320" height="240" controls style="display:none;">
                                        <source src="" type="video/mp4">
                                        Tu navegador no soporta la etiqueta de video.
                                    </video>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>


    <div class='test col-sm-12'>
        <br />
        <div style='float: right;'>
            <button type="button" id="btnActualizarDatosRequerimiento" class="btn btn-success">
                Actualizar Datos
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="row">
                <div class="col-lg-12">
                    <div class="form-group">
                        <label class="control-label"> Imagenes Adjuntos</label>
                        @foreach (var item in @ViewBag.DatosDocumentoListado)
                        {
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <div class="input-group mar-btm">
                                        @if (item.fcTipoArchivo == "pdf")
                                        {

                                            <a href="javascript:ShowBigPdf('@item.fcNombreArchivo','@item.fcURL')" class="text-info"> <i class="fal fa-2x fa-file-pdf"> </i> @item.fcNombreArchivo</a>
                                        }
                                        else if (item.fcTipoArchivo == ".mp4")
                                        {
                                            <a href="javascript:ShowBigPdf('@item.fcNombreArchivo','@item.fcURL','video/mp4')" class="text-info"> <i class="fal fa-2x fa-video"> </i> @item.fcNombreArchivo</a>
                                        }
                                        else
                                        {
                                            <a href="javascript:void(0)" data-Description="@item.fcNombreArchivo" class="text-info" onclick="ShowBigImage(this)" src="@item.fcURL"> <i class="fal fa-2x fa-file-image"> </i>  @item.fcNombreArchivo</a>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>

<script src="~/Content/js/loading/loading.js"></script>
<script>
    ///$("#fiIDEstadoRequerimiento").select2({ dropdownParent: $("#MyModalBig") }).trigger("change")
    ///$("#fiIDAreaSolicitante").select2({ dropdownParent: $("#MyModalBig") }).trigger("change")
    var estadoRequerimiento = @ViewBag.fiIDEstadoRequerimiento;
    var ID_REQUERIMIENTO = @ViewBag.idticket;
    var ID_USUARIO = @ViewBag.UsuarioLogueado;
    var idtiporequerimiento = @ViewBag.IdIncidencia;
    var ticketPadre = @ViewBag.TicketPadre;
    var SubCategoria = @ViewBag.fiTipoRequerimiento;
    var idMotivoEstado = @ViewBag.fiMotivoEstado;
    var CategoriaResolucion = @ViewBag.CategoriaResolucion;
    var SubCategoriaResolucion = @ViewBag.SubCategoriaResolucion;
    var fotosredimencionadas = [];
    var validar = false;
    var Validador = 0;
    var idserviciosusados = @Html.Raw(Json.Encode(ViewBag.IdServicios));
    var idCisusados = @Html.Raw(Json.Encode(ViewBag.IdsCis));
    var idservicios = [];
    var idCis = [];

    function previewVideo(event) {
        var video = document.getElementById('videoPreview');
        var file = event.target.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
            video.style.display = 'block';
            video.src = e.target.result;
        };

        if (file) {
            reader.readAsDataURL(file);
        }
    }
    // Cambiar el texto entre "Sí" y "No" cuando se cambia el estado del toggle
    toggle.addEventListener("change", function () {
        if (toggle.checked) {
            Validador = 1
            $('#divImagenes').css('display', 'none');
            $('#divVideo').css('display', 'block');
            toggleText.textContent = "Video";
        } else {
            Validador = 0
            $('#divImagenes').css('display', 'block');
            $('#divVideo').css('display', 'none');
            toggleText.textContent = "PDF e Imagenes";
        }
    });

    $(document).ready(function () {
        $("#fiCategoriadeDesarrollo").prop("disabled", true);
        $("#selectincidencia").prop("disabled", true);
        debugger;
        var divinfo = document.getElementById('iddivmotivo');//funcion que se usa para desocultar y ocultar las opciones de mantenimiento, al darle click al boton buscar
        var divCategoriaResolucion = document.getElementById('iddivCategoriaResolusion');
        var divSubCategoriaResolucion = document.getElementById('iddivSubCategoriaResolusion');
        if (estadoRequerimiento == 4 || estadoRequerimiento == 6 || estadoRequerimiento == 11) {
            //console.log(`entro en el if`);
            divinfo.style.display = 'block'
            if (estadoRequerimiento == 4)
            {
                document.getElementById('lblMotivo').innerHTML = 'Tipo Solucion';
            }
            if (estadoRequerimiento == 6) {
                document.getElementById('lblMotivo').innerHTML = 'Motivo Cancelacion';
            }
            if (estadoRequerimiento == 11) {
                document.getElementById('lblMotivo').innerHTML = 'Motivo Pausado';
            }

            $.ajax({
                url: "@Url.Action("SelectMotivos", "LlenarCampos")",
                type: "GET",
                data: { idestado: estadoRequerimiento },
                success: function (respuesta) {

                    var selectMotivo = $("#selectmotivo");

                    selectMotivo.empty();
                    selectMotivo.append($('<option>', {
                        value: 0,
                        text: 'Seleccione un Motivo'
                    }));
                    console.log(idMotivoEstado);
                    console.log(respuesta);
                    $.each(respuesta, function (index, item) {
                        selectMotivo.append($('<option>', {
                            value: item.fiMotivos,
                            text: item.fcNombreMotivo
                        }));
                    });
                    $("#selectmotivo").select2({ dropdownParent: $("#MyModalBig") }).val(idMotivoEstado).trigger("change");
                },
                error: function (respuesta) {
                    console.log(respuesta);
                }
            });
            if (estadoRequerimiento == 4)
            {

                var selectCategoriaResolucion = $("#selectCategoriaResolucion");
                var selectSubCategoriaResolucion = $("#selectSubCategoriaResolucion");
                selectCategoriaResolucion.empty();
                selectSubCategoriaResolucion.empty();
                divCategoriaResolucion.style.display = 'block'
                divSubCategoriaResolucion.style.display = 'block'

                $.ajax({
                url: "@Url.Action("SelectCategoriaResolucion", "LlenarCampos")",
                type: "GET",
                data: { },
                success: function (respuesta) {

                    debugger;

                    selectCategoriaResolucion.empty();
                    selectCategoriaResolucion.append($('<option>', {
                        value: 0,
                        text: 'Seleccione una Categoria Resolucion'
                    }));


                    $.each(respuesta, function (index, item) {
                        selectCategoriaResolucion.append($('<option>', {
                            value: item.fiIDCategoriaResolucion,
                            text: item.fcDescripcionCategoria
                        }));
                    });
                    $("#selectCategoriaResolucion").select2({ dropdownParent: $("#MyModalBig") }).val(CategoriaResolucion).trigger("change");
                    validar = true;

                },
                error: function (respuesta) {
                    console.log(respuesta);
                }
                });




            }
        } else {
            console.log(`entro en el else`);
            divinfo.style.display = 'none'
            divCategoriaResolucion.style.display = 'none'
            divSubCategoriaResolucion.style.display = 'none'
        }
    });

    $(`#fiCategoriadeDesarrollo`).on('change', function () {
        cambiodecategoria(0);
    })
    //console.log(idtiporequerimiento);
    cambiodecategoria(idtiporequerimiento);
    CambioticketPadre(ticketPadre);

    function cambiodecategoria(tipore) {
        var textcategorias = $("#fiCategoriadeDesarrollo option:selected").text();
        debugger;
        $.ajax({
            url: "@Url.Action("SelectIncidenciasByCategorias", "LlenarCampos")",
            type: "GET",
            data: { fccategoria: textcategorias},
            success: function (respuesta) {

                var selectIncidencia = $("#selectincidencia");

                selectIncidencia.empty();
                selectIncidencia.append($('<option>', {
                    value: 0,
                    text: 'Defina un Tipo Incidencia'
                }));

                $.each(respuesta, function(index, item) {
                    selectIncidencia.append($('<option>', {
                        value: item.fiIDTipoRequerimiento,
                        text: item.fcTipoRequerimiento
                    }));
                });

                //console.log(`esto trae el tipo incidencia: ${tipore}`);
                if (SubCategoria != 0) {
                    selectIncidencia.val(SubCategoria).trigger("change");
                }
                $("#selectincidencia").select2({ dropdownParent: $("#MyModalBig") }).val(SubCategoria).trigger("change");
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
    }

    function CambioticketPadre(idtiposoporte) {

        //console.log(`lo que trae por aqui ${idtiposoporte}`);
        $.ajax({
            url: "@Url.Action("SelecticketPadrese", "LlenarCampos")",
            data: { idticket: idtiporequerimiento},
            type: "GET",
            success: function (respuesta) {

                var selectpadre = $("#ticketPadre");

                selectpadre.empty();
                selectpadre.append($('<option>', {
                    value: 0,
                    text: 'Seleccione un Ticket Padre en caso que lo tenga'
                }));
                $("#ticketPadre").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function (index, item) {
                    if (item.fiIDRequerimiento != ID_REQUERIMIENTO)
                    {
                        selectpadre.append($('<option>', {
                            value: item.fiIDRequerimiento,
                            text: item.fcTituloRequerimiento
                        }));
                    }
                    
                });

                if (idtiposoporte != 0) {
                    selectpadre.val(idtiposoporte).trigger("change");
                }
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
    }


    $("#fiIDEstadoRequerimiento").select2({ dropdownParent: $("#MyModalBig") }).val(estadoRequerimiento).trigger("change");

    $(document).ready(function () {
        estadoRequerimiento = $("#dllEstadoRequerimiento option:selected").val();
    });

    $("#btnActualizarDatosRequerimiento").click(function () {
        ActualizarDatos();
    });

    function ActualizarDatos() {
        
        debugger
        H5_loading.show();
        var estado = 0;
        var estadoDescripcion = "";
        var incidencia = $("#selectincidencia").val();
        //var usuario = $("#selectusuarios").val();
        var estadoReque = $(`#fiIDEstadoRequerimiento`).val();
        var Video = $(`#getFile2`).val();

        if ($("#txtComentario").val() != "" || $("#txtComentario").val() != null) {
            var bitacora = {
                //idRequerimiento: ID_REQUERIMIENTO,
                Observaciones: $("#txtComentario").val(),
            }
            var detener = $(`#selectincidencia`).val();
            if (incidencia == 0 || incidencia == null || incidencia == "" || estadoReque == 0 || estadoReque == null || estadoReque == "") {
                H5_loading.hide();
                return ToastrError("Error", "Llene todos los campos");
            }

            if (estadoReque == 11 || estadoReque == "11" || estadoReque == 4 || estadoReque == "4" || estadoReque == 6 || estadoReque == "6") {
                if (Validador == 0) {
                    if (fotosredimencionadas.length < 1) {
                        ToastrError("Documento/Imagen", "Suba un documento o imagen para comprobar");
                        H5_loading.hide();
                        return 0;
                    }
                } else if (validador == 1)
                {
                    if (Video == "") {
                        ToastrError("Error", "Suba 1 Video");
                        $(this).prop("disabled", false);
                        H5_loading.hide();
                        return 0;
                    }
                }
                

            }

            if (estadoReque == 0 && $("#selectmotivo").val()==0 && $("#selectCategoriaResolucion").val()==0 && $("#selectSubCategoriaResolucion").val()==0 ) {
                H5_loading.hide();
                return ToastrError("Error", "Llene todos los campos");
            }

            if (fotosredimencionadas.length < 1 && Validador == 0) {
                H5_loading.hide();
                ToastrError("Error", "Suba aun que sea 1 documento");
                $(this).prop("disabled", false);
                return 0;
            }

            if (Video == "" && Validador == 1) {
                H5_loading.hide();
                ToastrError("Error", "Suba 1 Video");
                $(this).prop("disabled", false);
                return 0;
            }
            //console.log(`esto trael el motivo: ${$("#selectmotivo").val()}`);

            var listaservicios = [];
            for (const item of idservicios) {
                if (item.select == true) {
                    listaservicios.push(item.fiIDServicio);
                }
            }
            var listacis = [];
            for (const item of idCis) {
                listacis.push(item.id);
            }
            debugger;


            if (estadoReque == 0 || estadoReque == null) {
                estado = 3
            }

            if (estadoReque == 4 || estadoReque == 6 || estadoReque == 11) {
                if ($(`#selectmotivo`).val() == null || $(`#selectmotivo`).val() == "" || $(`#selectmotivo`).val() == 0) {
                    H5_loading.hide();
                    return ToastrError("Error", "Llene todos los campos");
                }
                if (estadoReque == 4) {
                    if ($(`#selectCategoriaResolucion`).val() == null || $(`#selectCategoriaResolucion`).val() == "" || $(`#selectCategoriaResolucion`).val() == 0 || $(`#selectSubCategoriaResolucion`).val() == null || $(`#selectSubCategoriaResolucion`).val() == "" || $(`#selectSubCategoriaResolucion`).val() == 0) {
                        H5_loading.hide();
                        return ToastrError("Error", "Llene todos los campos");
                    }
                }
            }

            var requerimiento = {
                fiIDRequerimiento: ID_REQUERIMIENTO,
                fcTituloRequerimiento: $("#fcTituloRequerimiento").val(),
                fcDescripcionRequerimiento: $("#fcDescripcionRequerimiento").val(),//hola,
                fiIDEstadoRequerimiento: estadoReque,
                fcDescripcionEstado: $("#fiIDEstadoRequerimiento :selected").text(),
                fiCategoriadeDesarrollo: $(`#fiCategoriadeDesarrollo`).val(),
                fiTipoRequerimiento: $(`#selectincidencia`).val(),
                fiIdTicketPadre: $(`#ticketPadre`).val(),
                fiMotivoEstado: $("#selectmotivo").val(),
                fiCategoriaResolucion: $("#selectCategoriaResolucion").val(),
                fiSubCategoriaResolucion: $("#selectSubCategoriaResolucion").val()
                //fiIDUsuarioAsignado: $("#fiIDUsuarioAsignado option:selected").val() == "" ? 1 : parseInt($("#fiIDUsuarioAsignado option:selected").val()),

                //$("#txtComentario").val(),
                //fiIDAreaSolicitante: $("#fiIDAreaSolicitante option:selected").val() == null ? 0 : parseInt($("#fiIDAreaSolicitante option:selected").val()),//$("#txtComentario").val(),
                //fcNombreAreaSolicitante: $("#fiIDAreaSolicitante :selected").text(),
                //fiAreaAsignada: $(`#fiAreaAsignada`).val() == null ? 0 : parseInt($("#fiAreaAsignada option:selected").val()),
            }
            $.ajax({
                type: "POST",
                url: "@Url.Action("ActualizarDatos", "Ticket")",
                data: { ticket: requerimiento, comentario: $("#txtComentario").val(), serviciosAfectados: listaservicios, Ciaguardar: listacis},
                error: function (xhr, ajaxOptions, thrownError) {
                    H5_loading.hide();
                    //MensajeError("Error, contacte al administrador.");
                    var dataerror = { Titulo: "Error", Mensaje: "Error Al Actualizar el Ticket", Estado: false }
                    AlertaAjax(dataerror)
                },
                success: function (data) {
                    //console.log(data);
                    debugger;
                    let resultado = data.d;
                    if (data.Estado == true) {

                        $("#txtComentario").val(""),

                        $("#modalConfirmarDatos").modal('hide');

                        if (Validador == 0) {
                            GuardarDocumentos(ID_REQUERIMIENTO);
                        }
                        else if (Validador == 1) {
                            MandarVideo(ID_REQUERIMIENTO);
                        }
                        
                        return ToastrSuccess("Exito", "Ticket Actualizado Correctamente");

                    }
                    else {
                        var dataerror = { Titulo: "Error", Mensaje: "Error Al Actualizar el Ticket", Estado: false }
                        AlertaAjax(dataerror)
                        //MensajeErrorModal("No se pudo realizar la actualizacion de Datos, contacte al administrador.");
                    }
                }
            });

        }
        else {
            $("#txtComentario").parsley().validate();
        }

    }

    function MandarVideo(IdSolicitud)
    {
        debugger;
        var form_data = new FormData();
        form_data.append("img", $("#getFile2")[0].files[0]);
        form_data.append("idSolicitd", IdSolicitud);
        $.ajax({
                url: "@Url.Action("GuardarVideo", "Ticket")",
                type: 'POST',
            data: form_data,
            timeout: 800000,
                cache: false,
                contentType: false,
                processData: false,
                enctype: "multipart/form-data",
                success: function (data) {
                    ToastrSuccess("Listo!", "Subido correctamente");
                    H5_loading.hide();
                    CerrarModal();
                    Recargar();
                    location.reload();

                }, error: function () {
                    ToastrError("Error", "Falta subir la data para el envio Masivo");


                }
            });
    }

    $("#btnActualizarDatos_Confirmar").click(function () {
        ActualizarDatos();

    });


    myDropzone = $('#Imagen-dropzone').dropzone({
        //url: '/file/post',
        autoProcessQueue: true,
        uploadMultiple: true,
        acceptedFiles: "image/*,.pdf",
        //maxFiles: 1,
        addRemoveLinks: true,
        dictMaxFilesExceeded: "Maximum upload limit reached",
        dictInvalidFileType: "Upload only JPG/PNG/PDF",
        //resizeWidth: 500,
        //resizeHeight: 300,

        init: function () {
            var myDropzone = this;

            myDropzone.on('maxfilesexceeded', function (file) {
                this.removeAllFiles();
                this.addFile(file);
            });

            myDropzone.on('addedfile', function (file) {
                //console.log("entro aquí el base64");
                //console.log("file.type:", file.type);

                var tipoarchivo = file.type;
                if (tipoarchivo == "application/pdf") {

                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var base64String = e.target.result.split(',')[1]; // Obtener solo la parte base64

                        //console.log('Base64 String:', base64String);
                        fotosredimencionadas.push({ base: base64String, nombreArchivo: file.name, tipoarchivo: file.type.split('/')[1], pbEsImagen: false });
                        //console.log(fotosredimencionadas);

                        // Aquí puedes manejar el Base64 string, por ejemplo enviarlo a un servidor
                    };
                    reader.readAsDataURL(file);
                } else if (tipoarchivo.startsWith("image/")) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var base64String = e.target.result.split(',')[1]; // Obtener solo la parte base64
                        fotosredimencionadas.push({ base: base64String, nombreArchivo: file.name, tipoarchivo: file.type.split('/')[1], pbEsImagen: true });
                    }

                    //myDropzone.emit("thumbnail", file); // Emitir el evento de thumbnail para imágenes
                } else {
                    ToastrError("Error", "Tipo de archivo no valido solo se permite pdf y imagenes");
                }
            });

            myDropzone.on('thumbnail', function (file, dataURL) {
                RedimencionarImagen(`fotopreviacanva`, file, "fotoprevia2", file.name, file.type.split('/')[1])
            });
        },

        removedfile: function (file) {
            archivoExterno = 0;
            var _ref = file.previewElement;
            return _ref != null ? _ref.parentNode.removeChild(file.previewElement) : void 0;
        }
    });

    function RedimencionarImagen(idcanva, eimagencaptada, idimg, NombreArchivo, tipoimagen) {
        debugger;
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d'); // capturamos el id del camva para ponerlo la imagen oculta ahi y asi poder tomar esa imagen y no la que se esta mostrando
        var img = new Image;

        //console.log(eimagencaptada.type);

        img.src = URL.createObjectURL(eimagencaptada); // insertamos la imagen que el cliente subio para posteriormente hacer la reduccion
        img.onload = function () {
            var maxAncho = 900;  // aqui le ponemos unas medidas estandar que pueden cambiar en un futuro,
            var maxAlto = 1500;
            if ((img.width * img.height) > (maxAncho * maxAlto)) {
                var proporcion = Math.min(maxAncho / img.width, maxAlto / img.height); // aqui hacemos una proporcion de las imagenes con respecto al tamaño de la imagen original y al estandar que tenemos nosotros aqui adentro
                var propdos = img.width / img.height;
                var ancho = img.width * proporcion;
                var alto = img.height * proporcion;

                canvas.width = (img.width / propdos); // ponemos el tamaño en el canva oculto
                canvas.height = (img.height / propdos);

                ctx.drawImage(img, 0, 0, (img.width / propdos), (img.height / propdos));
                //console.log(canvas.toDataURL('image/jpeg', 0.7)); // tira el base 64


                //console.log(canvas.toDataURL('image/jpeg', 0.7)); // aqui para saber el base64 de la imagen
            }
            else {
                canvas.width = (img.width); // ponemos el tamaño en el canva oculto
                canvas.height = (img.height);

                ctx.drawImage(img, 0, 0, (img.width), (img.height));
            }
            var urlbase64 = getBase64Image(img); // tira el base 64
            fotosredimencionadas.push({ base: canvas.toDataURL('image/jpeg', 0.75), nombreArchivo: NombreArchivo, tipoarchivo: tipoimagen, pbEsImagen: true });
            return ctx;
            //document.getElementById(idimg).src = canvas.toDataURL('image/jpeg', 0.7); // el 07 es la calidad de la imagen si no estoy mal eso decia en la documentacion
            //document.getElementById(idcanva).style.display = "block"; //mostrar la imagen que esta oculta
        }
    }

    function getBase64Image(img) {
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        var dataURL = canvas.toDataURL();
        return dataURL;
    }

    function GuardarDocumentos(IdRequerimiento) {
        debugger
        //const form = new FormData();

        //form.append("idDocumento", 1);
        var mod = [];

        var cont = 0;
        if (fotosredimencionadas.length < 1) {
            //var datasus = { Titulo: "Exito", Mensaje: "Imagenes", Estado: true }
            //AlertaAjax(datasus)
            location.reload();
            return 0;
        }

        for (const item of fotosredimencionadas) {

            mod.push({ piIDRequerimiento: ID_REQUERIMIENTO, pcTipoArchivo: item.tipoarchivo, pcNombreArchivo: item.nombreArchivo, pcRutaArchivo: item.base, idSesion: 1, idApp: 1, pcURL: "-" });


            //form.append(`modelo[${cont}].`, );
            ////form.append("modelo[].idUsuario", ID_USUARIO);
            //form.append(`modelo[${cont}].`, 1); // se usaba anteriormente para saber si un archivo era imagen, documento o un dinosaurio, pero con el base 64 eso ya no importa pero para no cambiar todo el flujo se deja en 1
            //form.append(`modelo[${cont}].`, );
            //form.append(`modelo[${cont}].`, );
            //form.append(`modelo[${cont}].`, 1); //de momento no se para que se ocupa estas variables pero el procedimiento las pide asi que poner 1 por cualquier cosa
            //form.append(`modelo[${cont}].`, 1);//de momento no se para que se ocupa estas variables pero el procedimiento las pide asi que poner 1 por cualquier cosa
            //cont++
        }


        $.ajax({
            url: "@Url.Action("Guardardocumentos", "Ticket")",
            type: "POST",
            data: { modelo: mod },

                timeout: 800000,
                success: function (data) {
                    H5_loading.hide();
                    //var datasus = { Titulo: "Exito", Mensaje: "Documentos guardados correctamente", Estado: true }
                    //AlertaAjax(datasus)
                    CerrarModal();
                    Recargar();
                    location.reload();

                },
                error: function (e) {
                    var dataerror = { Titulo: "Error", Mensaje: "Error Al querer Subir Imagenes", Estado: false }
                    AlertaAjax(dataerror)
                    console.error(e);

                }
            });


    }



    select();
    function select() {
        $.ajax({
            url: "@Url.Action("SelectServiciosAfectados", "LlenarCampos")",
            data: { idticket: ID_REQUERIMIENTO},
            type: "GET",
            success: function (respuesta) {

                var selectservicios = $("#ticketservafectados");

                selectservicios.empty();

                $("#ticketservafectados").select2({ dropdownParent: $("#MyModalBig") }).val(null).trigger("change");
                $.each(respuesta, function (index, item) {
                    idservicios.push({ select: false, fiIDServicio: item.fiIDServicio, fcNombreServicio: item.fcNombreServicio})
                });
                llenartableServicios(idservicios);
                //
                //console.log(idserviciosusados);
            },
            error: function (respuesta) {
                console.log(respuesta);
            }
        });
        llenartableCis();
    }

    function llenartableServicios(servicios) {


        var tbo = `<table class="table table-bordered table-hover table-striped w-100 dataTable dtr-inline" style="width:100%;" id="selectvistaservicios">
                        <thead>
                            <tr>
                                <th>Descripcion</th>
                            </tr>
                        </thead>
                    <tbody >

                        `;
        for (const item of idserviciosusados) {
            tbo += `<tr>
                        <td>${item.fcNombreServicio}</td>
                    </tr>`;

        }
        tbo += `</tbody>
                    </table>`

        $(`#tbodyservicios`).empty()
        $(`#tbodyservicios`).append(tbo);
    }

    function llenartableCis() {
        //console.log(idCisusados);
        var tbo = `<table class="table table-bordered table-hover table-striped w-100 dataTable dtr-inline" style="width:100%;" id="selectvistacis">
                        <thead>
                            <tr>
                                <th>Descripcion</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody >

                        `;
        for (const item of idCisusados) {
            tbo += `<tr>
                            <td>${item.fcConfiguracion}</td>
                            <td></td>
                        </tr>`;

        }
        tbo += `</tbody>
                    </table>`

        $(`#tbodycis`).empty()
        $(`#tbodycis`).append(tbo);
    }

    function removeCommonElements(arr1, arr2) {
        let set2 = new Set(arr2.map(item => item.fiIDServicio));
        let filteredArr1 = arr1.filter(item => !set2.has(item.fiIdServicioAfectado));

        let set1 = new Set(arr1.map(item => item.fiIdServicioAfectado));
        let filteredArr2 = arr2.filter(item => !set1.has(item.fiIDServicio));

        return { filteredArr1, filteredArr2 };
    }


    $(`#fiIDEstadoRequerimiento`).on(`change`, function () {
        //console.log(`Cambio ahora`);
        var divinfo = document.getElementById('iddivmotivo');//funcion que se usa para desocultar y ocultar las opciones de mantenimiento, al darle click al boton buscar
        var divCategoriaResolucion = document.getElementById('iddivCategoriaResolusion');
        var divSubCategoriaResolucion = document.getElementById('iddivSubCategoriaResolusion');

        if ($(this).val() == 4 || $(this).val() == 6 || $(this).val() == 11) {
            //console.log(`entro en el if`);
            divinfo.style.display = 'block'
            if ($(this).val() == 4)
            {
                document.getElementById('lblMotivo').innerHTML = 'Tipo Solucion';
            }
            if ($(this).val() == 6) {
                document.getElementById('lblMotivo').innerHTML = 'Motivo Cancelacion';
            }
            if ($(this).val() == 11) {
                document.getElementById('lblMotivo').innerHTML = 'Motivo Pausado';
            }

            $.ajax({
                url: "@Url.Action("SelectMotivos", "LlenarCampos")",
                type: "GET",
                data: { idestado: $(this).val() },
                success: function (respuesta) {

                    var selectMotivo = $("#selectmotivo");

                    selectMotivo.empty();
                    selectMotivo.append($('<option>', {
                        value: 0,
                        text: 'Seleccione un Motivo'
                    }));

                    $.each(respuesta, function (index, item) {
                        selectMotivo.append($('<option>', {
                            value: item.fiMotivos,
                            text: item.fcNombreMotivo
                        }));
                    });

                    $("#selectmotivo").select2({ dropdownParent: $("#MyModalBig") }).val(idMotivoEstado).trigger("change");
                },
                error: function (respuesta) {
                    console.log(respuesta);
                }
            });
            if ($(this).val() == 4)
            {

                var selectCategoriaResolucion = $("#selectCategoriaResolucion");
                var selectSubCategoriaResolucion = $("#selectSubCategoriaResolucion");
                selectCategoriaResolucion.empty();
                selectSubCategoriaResolucion.empty();
                divCategoriaResolucion.style.display = 'block'
                divSubCategoriaResolucion.style.display = 'block'

                $.ajax({
                url: "@Url.Action("SelectCategoriaResolucion", "LlenarCampos")",
                type: "GET",
                data: { },
                success: function (respuesta) {

                    debugger;

                    selectCategoriaResolucion.empty();
                    selectCategoriaResolucion.append($('<option>', {
                        value: 0,
                        text: 'Seleccione una Categoria Resolucion'
                    }));

                    $("#selectCategoriaResolucion").select2({ dropdownParent: $("#MyModalBig") }).val(1).trigger("change");
                    $.each(respuesta, function (index, item) {
                        selectCategoriaResolucion.append($('<option>', {
                            value: item.fiIDCategoriaResolucion,
                            text: item.fcDescripcionCategoria
                        }));
                    });
                },
                error: function (respuesta) {
                    console.log(respuesta);
                }
            });

            }
        } else {
            console.log(`entro en el else`);
            divinfo.style.display = 'none'
            divCategoriaResolucion.style.display = 'none'
            divSubCategoriaResolucion.style.display = 'none'
        }


    });

    $(`#selectCategoriaResolucion`).on(`change`, function () {
        $.ajax({
                url: "@Url.Action("SelectSubCategoriaResolucion", "LlenarCampos")",
                type: "GET",
                data: { Categoria: $(this).val() },
                success: function (respuesta) {

                    debugger;
                    var selectSubCategoriaResolucion = $("#selectSubCategoriaResolucion");
                    selectSubCategoriaResolucion.empty();
                    selectCategoriaResolucion.append($('<option>', {
                        value: 0,
                        text: 'Seleccione una SubCategoria Resolucion'
                    }));

                    $.each(respuesta, function (index, item) {
                        selectSubCategoriaResolucion.append($('<option>', {
                            value: item.fiIDTipoRequerimientoResolucion,
                            text: item.fcTipoRequerimiento
                        }));
                    });
                    if (validar) {
                        $("#selectSubCategoriaResolucion").select2({ dropdownParent: $("#MyModalBig") }).val(SubCategoriaResolucion).trigger("change");
                        validar = false
                    } else {
                    $("#selectSubCategoriaResolucion").select2({ dropdownParent: $("#MyModalBig") }).val(0).trigger("change");
                    }
                },
                error: function (respuesta) {
                    console.log(respuesta);
                }
            });
    });

    function AgregarServicios() {
        //const { idserviciosusados, idserviciosnuevos } = removeCommonServices(idserviciosusados, idserviciosnuevos);
        //console.log(idserviciosusados);
        //console.log(idservicios);
        let { filteredArr1, filteredArr2 } = removeCommonElements(idserviciosusados, idservicios);
        idservicios = filteredArr2;
        //console.log(idservicios);
        $.ajax({
            url: "@Url.Action("AgregarServicios", "Ticket")",
            method: "get",
            //data: { id: id },
            success: function (data) {
                ShowModalSmall(data);
            },
            error: function (resp) {
                AlertaError();
            }
        });
    }

    function AgregarCI() {
        //console.log("entro en ese proceso")
         $.ajax({
                url: "@Url.Action("AgregarCI", "Ticket")",
                method: "get",
                //data: { id: id },
             success: function (data) {
                 ShowModal3(data);
                },
                error: function (resp) {
                    AlertaError();
                }
            });
    }

    function Recargar()
    {
        location.reload();
    }

</script>